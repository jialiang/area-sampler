{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/classes/Color.ts","src/classes/Options.ts","src/classes/Preview.ts","src/classes/Results.ts","src/classes/Selection.ts","src/classes/Util.ts","src/index.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","Util_1","Color","constructor","this","g","b","hex","Math","round","toString","slice","getHsl","s","h","max","l","min","let","abs","arguments","rgba","parseInt","rgb","toRgb","map","join","toRgba","push","toHex6","toHex8","toHsl","toHsla","squaredValues","Array","keys","getMeanMedian","averagingMethod","sort","sqrt","floor","getLightestDarkest","pow","indexOf","blendColors","default","Proxy","get","fieldHashmap","value","super","onBeforeChange","fieldToBeforeChangeCallback","callback","removeEventListener","addEventListener","triggerAllBeforeChangeCallbacks","fieldArray","forEach","name","onChange","Color_1","handleReadUpload","uploader","image","FileReader","target","result","src","files","readAsDataURL","handleUpdateImage","preview","context","opacity","backgroundColor","width","height","clearRect","drawImage","getImageData","d","data","colors","clamp","putImageData","OffscreenCanvas","getContext","fillStyle","fillRect","loadExampleImage","getColorsAt","setBackgroundColor","setOpacity","Image","resultElementArray","backgroundElement","style","setResult","resultElementHashmap","resultFormat","hideAlphaChannel","textElement","querySelector","preventDefault","navigator","clipboard","writeText","set","split","foregroundElement","isInProgress","startPosition","x","y","endPosition","handleTouch","targetTouches","changedTouches","type","updateInfo","updateOutline","getBoundingClientRect","clientX","left","clientY","top","handleSelect","button","info","bottom","right","outline","cssText","clear","onmousedown","onmouseup","onmousemove","onmouseleave","ontouchstart","ontouchend","ontouchmove","onSelectionEnd","debounce","clearTimeout","setTimeout","apply","Options_1","Preview_1","Selection_1","Results_1","requestAnimationFrame","from","document","querySelectorAll","reset","C","opacityPercentage","transparencyType"],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import Options from \"./Options\";\r\nimport { round } from \"./Util\";\r\n\r\nexport default class Color {\r\n  static squaredValues = [...Array(256).keys()].map((value) => value * value);\r\n\r\n  static getMeanMedian = (colors: Color[], options: Options) => {\r\n    const averagingMethod = options.averagingMethod;\r\n    const numberOfPixels = colors.length;\r\n\r\n    const mean = new Color();\r\n    const median = new Color();\r\n\r\n    const colorChannels = [\"r\", \"g\", \"b\", \"a\"] as const;\r\n\r\n    for (let i = 0; i < colorChannels.length; i++) {\r\n      const channel = colorChannels[i];\r\n\r\n      const values = [] as number[];\r\n\r\n      for (let i = 0; i < colors.length; i++) values.push(colors[i][channel]);\r\n\r\n      const sortedValues = values.sort();\r\n\r\n      if (averagingMethod === \"squared\") {\r\n        let totalSquaredValue = 0;\r\n\r\n        for (let i = 0; i < values.length; i++) totalSquaredValue += Color.squaredValues[values[i]];\r\n\r\n        const meanSquaredValue = totalSquaredValue / numberOfPixels;\r\n        const meanValue = Math.sqrt(meanSquaredValue);\r\n\r\n        mean[channel] = meanValue;\r\n      }\r\n\r\n      if (averagingMethod === \"simple\") {\r\n        let totalValue = 0;\r\n\r\n        for (let i = 0; i < values.length; i++) totalValue += values[i];\r\n\r\n        const meanValue = totalValue / numberOfPixels;\r\n\r\n        mean[channel] = meanValue;\r\n      }\r\n\r\n      const medianIndex = Math.floor(sortedValues.length / 2);\r\n\r\n      median[channel] = sortedValues[medianIndex];\r\n    }\r\n\r\n    return [mean, median];\r\n  };\r\n\r\n  static getLightestDarkest = (colors: Color[]) => {\r\n    const sRGBtoLinear = (channel: number) => {\r\n      if (channel <= 0.04045) return channel / 12.92;\r\n\r\n      return Math.pow((channel + 0.055) / 1.055, 2.4);\r\n    };\r\n\r\n    const lightnessValues = colors.map((color) => {\r\n      const lR = sRGBtoLinear(color.r / 255);\r\n      const lG = sRGBtoLinear(color.g / 255);\r\n      const lB = sRGBtoLinear(color.b / 255);\r\n\r\n      const luminance = 0.2126 * lR + 0.7152 * lG + 0.0722 * lB;\r\n\r\n      if (luminance <= 216 / 24389) return luminance * (24389 / 27);\r\n      return Math.pow(luminance, 1 / 3) * 116 - 16;\r\n    });\r\n\r\n    const lightnestValue = Math.max(...lightnessValues);\r\n    const darkestValue = Math.min(...lightnessValues);\r\n\r\n    const lightestIndex = lightnessValues.indexOf(lightnestValue);\r\n    const darkestIndex = lightnessValues.indexOf(darkestValue);\r\n\r\n    return [colors[lightestIndex], colors[darkestIndex]];\r\n  };\r\n\r\n  static blendColors = (background: Color, foreground: Color) => {\r\n    const normalFgAlpha = foreground.a / 255;\r\n    const normalBgAlpha = 1 - normalFgAlpha;\r\n\r\n    const channels = [\"r\", \"g\", \"b\"] as const;\r\n\r\n    const rgb = channels.map((c) => background[c] * normalBgAlpha + foreground[c] * normalFgAlpha);\r\n\r\n    return new Color(...rgb);\r\n  };\r\n\r\n  r = 0; // 0-255\r\n  g = 0; // 0-255;\r\n  b = 0; // 0-255;\r\n  a = 0; // 0-255;\r\n\r\n  constructor(a?: number | string | Color, b?: number, c?: number, d?: number) {\r\n    if (arguments.length === 1) {\r\n      if (a instanceof Color) return new Color(...a.rgba);\r\n\r\n      if (typeof a === \"string\" && a[0] === \"#\") {\r\n        let hex = a;\r\n\r\n        if (hex.length === 4) hex = \"#\" + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3];\r\n\r\n        if (hex.length === 7 || hex.length === 9) {\r\n          this.r = parseInt(hex[1] + hex[2], 16);\r\n          this.g = parseInt(hex[3] + hex[4], 16);\r\n          this.b = parseInt(hex[5] + hex[6], 16);\r\n\r\n          if (hex.length === 9) this.a = parseInt(hex[7] + hex[8], 16);\r\n          else this.a = 255;\r\n        }\r\n\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (arguments.length === 3 || arguments.length === 4) {\r\n      const alpha = d == null ? 255 : d;\r\n\r\n      if (typeof a === \"number\" && typeof b === \"number\" && typeof c === \"number\") {\r\n        this.r = a;\r\n        this.g = b;\r\n        this.b = c;\r\n      }\r\n\r\n      this.a = alpha;\r\n    }\r\n  }\r\n\r\n  get rgb(): [number, number, number] {\r\n    const { r, g, b } = this;\r\n\r\n    return [r, g, b];\r\n  }\r\n\r\n  get rgba(): [number, number, number, number] {\r\n    const { r, g, b, a } = this;\r\n\r\n    return [r, g, b, a];\r\n  }\r\n\r\n  toRgb() {\r\n    const { r, g, b } = this;\r\n\r\n    const rgb = [r, g, b].map((value) => Math.round(value));\r\n\r\n    return `rgb(${rgb.join(\", \")})`;\r\n  }\r\n\r\n  toRgba() {\r\n    const { r, g, b, a } = this;\r\n\r\n    const rgba = [r, g, b].map((value) => Math.round(value));\r\n    rgba.push(round(a / 255, 2));\r\n\r\n    return `rgba(${rgba.join(\", \")})`;\r\n  }\r\n\r\n  private hex = (value: number) => (\"0\" + Math.round(value).toString(16)).slice(-2);\r\n\r\n  toHex6() {\r\n    const { r, g, b, hex } = this;\r\n\r\n    return \"#\" + hex(r) + hex(g) + hex(b);\r\n  }\r\n\r\n  toHex8() {\r\n    const { r, g, b, a, hex } = this;\r\n\r\n    return \"#\" + hex(r) + hex(g) + hex(b) + hex(a);\r\n  }\r\n\r\n  private getHsl = () => {\r\n    const { r, g, b } = this;\r\n\r\n    const nR = r / 255;\r\n    const nG = g / 255;\r\n    const nB = b / 255;\r\n\r\n    const max = Math.max(nR, nG, nB);\r\n    const min = Math.min(nR, nG, nB);\r\n    const delta = max - min;\r\n\r\n    let hue, lightness, saturation;\r\n\r\n    // hue\r\n    if (delta === 0) hue = 0;\r\n    else if (nR === max) hue = ((nG - nB) / delta) % 6;\r\n    else if (nG === max) hue = (nB - nR) / delta + 2;\r\n    else hue = (nR - nG) / delta + 4;\r\n\r\n    hue = Math.round(hue * 60);\r\n\r\n    if (hue < 0) hue += 360;\r\n\r\n    // lightness\r\n    lightness = (max + min) / 2;\r\n\r\n    // saturation\r\n    if (delta === 0) saturation = 0;\r\n    else saturation = delta / (1 - Math.abs(2 * lightness - 1));\r\n\r\n    lightness = round(lightness * 100, 1);\r\n    saturation = round(saturation * 100, 1);\r\n\r\n    return [hue, saturation, lightness];\r\n  };\r\n\r\n  toHsl() {\r\n    const [hue, saturation, lightness] = this.getHsl();\r\n\r\n    return `hsl(${hue}, ${saturation}%, ${lightness}%)`;\r\n  }\r\n\r\n  toHsla() {\r\n    const { a } = this;\r\n\r\n    const [hue, saturation, lightness] = this.getHsl();\r\n\r\n    const alpha = round(a / 255, 2);\r\n\r\n    return `hsla(${hue}, ${saturation}%, ${lightness}%, ${alpha})`;\r\n  }\r\n}\r\n","class OptionsProxy {\r\n  [key: string]: any;\r\n\r\n  constructor() {\r\n    return new Proxy(this as unknown as Options, {\r\n      get: (target, name) => {\r\n        const field = target.fieldHashmap[name.toString()];\r\n\r\n        if (field) return field.value;\r\n\r\n        return target[name as keyof Options];\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default class Options extends OptionsProxy {\r\n  readonly fieldArray: (HTMLInputElement | HTMLSelectElement)[];\r\n  readonly fieldHashmap: {\r\n    [key: string]: HTMLInputElement | HTMLSelectElement;\r\n  };\r\n  readonly fieldToBeforeChangeCallback: {\r\n    [key: string]: () => void;\r\n  };\r\n\r\n  callback?: () => void;\r\n\r\n  constructor(optionFields: (HTMLInputElement | HTMLSelectElement)[], callback?: () => void) {\r\n    super();\r\n\r\n    this.fieldArray = optionFields;\r\n    this.fieldHashmap = {};\r\n    this.fieldToBeforeChangeCallback = {};\r\n\r\n    optionFields.forEach((field) => {\r\n      this.fieldHashmap[field.name] = field;\r\n    });\r\n\r\n    if (callback) this.onChange = callback;\r\n  }\r\n\r\n  onBeforeChange = (name: string, newBeforeChangeCallback: () => void) => {\r\n    const { fieldHashmap, fieldToBeforeChangeCallback, callback } = this;\r\n\r\n    const field = fieldHashmap[name];\r\n\r\n    if (!field) return;\r\n\r\n    const beforeChangeCallback = fieldToBeforeChangeCallback[name];\r\n\r\n    if (callback) field.removeEventListener(\"change\", callback);\r\n    if (beforeChangeCallback) field.removeEventListener(\"change\", beforeChangeCallback);\r\n\r\n    field.addEventListener(\"change\", newBeforeChangeCallback);\r\n\r\n    if (callback) field.addEventListener(\"change\", callback);\r\n\r\n    fieldToBeforeChangeCallback[name] = newBeforeChangeCallback;\r\n  };\r\n\r\n  triggerAllBeforeChangeCallbacks = () => {\r\n    const { fieldArray, fieldToBeforeChangeCallback } = this;\r\n\r\n    fieldArray.forEach((field) => {\r\n      const beforeChangeCallback = fieldToBeforeChangeCallback[field.name];\r\n\r\n      if (beforeChangeCallback) beforeChangeCallback();\r\n    });\r\n  };\r\n\r\n  set onChange(newCallback: () => void) {\r\n    const { fieldArray, callback } = this;\r\n\r\n    fieldArray.forEach((field) => {\r\n      if (callback) field.removeEventListener(\"change\", callback);\r\n      field.addEventListener(\"change\", newCallback);\r\n    });\r\n\r\n    this.callback = newCallback;\r\n  }\r\n}\r\n","import Color from \"./Color\";\r\nimport { clamp } from \"./Util\";\r\n\r\nexport default class Preview {\r\n  readonly preview: HTMLCanvasElement;\r\n  readonly uploader: HTMLInputElement;\r\n\r\n  private context: CanvasRenderingContext2D;\r\n  private image: HTMLImageElement;\r\n  private colors: Color[];\r\n\r\n  private opacity: number | undefined;\r\n  private backgroundColor: Color | undefined;\r\n\r\n  constructor(previewElement: HTMLCanvasElement, uploaderElement: HTMLInputElement) {\r\n    const image = new Image();\r\n    image.addEventListener(\"load\", this.handleUpdateImage);\r\n\r\n    uploaderElement.addEventListener(\"change\", this.handleReadUpload);\r\n\r\n    this.preview = previewElement;\r\n    this.uploader = uploaderElement;\r\n\r\n    const context = previewElement.getContext(\"2d\");\r\n    if (!context) throw \"Failed to get 2D context from canvas element.\";\r\n\r\n    this.context = context;\r\n    this.image = image;\r\n    this.colors = [];\r\n  }\r\n\r\n  handleReadUpload = () => {\r\n    const { uploader, image } = this;\r\n\r\n    const fileReader = new FileReader();\r\n\r\n    fileReader.addEventListener(\"load\", (e) => {\r\n      if (!e.target || !e.target.result) throw \"Failed to read uploaded file.\";\r\n\r\n      image.src = e.target.result.toString();\r\n    });\r\n\r\n    if (!uploader.files) throw \"Asked to read image file but found no file was uploaded.\";\r\n\r\n    fileReader.readAsDataURL(uploader.files[0]);\r\n  };\r\n\r\n  handleUpdateImage = () => {\r\n    const { preview, context, image, opacity, backgroundColor } = this;\r\n    const { width, height } = image;\r\n\r\n    const imageDataToColorArray = (imageData: Uint8ClampedArray) => {\r\n      const colors = [];\r\n\r\n      for (let i = 0; i < imageData.length; i += 4) {\r\n        const r = imageData[i + 0];\r\n        const g = imageData[i + 1];\r\n        const b = imageData[i + 2];\r\n        const a = imageData[i + 3];\r\n\r\n        colors.push(new Color(r, g, b, a));\r\n      }\r\n\r\n      return colors;\r\n    };\r\n\r\n    if (width === 0 || height === 0) return false;\r\n\r\n    preview.width = width;\r\n    preview.height = height;\r\n\r\n    context.clearRect(0, 0, width, height);\r\n    context.drawImage(image, 0, 0);\r\n\r\n    const imageData = context.getImageData(0, 0, width, height);\r\n    const values = imageData.data;\r\n\r\n    if (!opacity && !backgroundColor) {\r\n      this.colors = imageDataToColorArray(values);\r\n      return true;\r\n    }\r\n\r\n    // Handle Opacity\r\n\r\n    if (opacity) {\r\n      for (let i = 0; i < values.length; i += 4) {\r\n        const alpha = values[i + 3] * (opacity || 1);\r\n        const clampedAlpha = clamp(alpha, 0, 255);\r\n\r\n        values[i + 3] = clampedAlpha;\r\n      }\r\n\r\n      context.putImageData(imageData, 0, 0);\r\n\r\n      if (!backgroundColor) {\r\n        this.colors = imageDataToColorArray(values);\r\n        return true;\r\n      }\r\n    }\r\n\r\n    // Handle Background Color\r\n\r\n    if (backgroundColor) {\r\n      const offscreenCanvas = new OffscreenCanvas(width, height);\r\n      const offscreenContext = offscreenCanvas.getContext(\"2d\");\r\n\r\n      if (!offscreenContext) throw \"Failed to get 2D context of offscreen canvas.\";\r\n\r\n      offscreenContext.fillStyle = backgroundColor.toRgba();\r\n      offscreenContext.fillRect(0, 0, width, height);\r\n      offscreenContext.drawImage(preview, 0, 0);\r\n\r\n      context.drawImage(offscreenCanvas, 0, 0);\r\n\r\n      this.colors = imageDataToColorArray(context.getImageData(0, 0, width, height).data);\r\n    }\r\n  };\r\n\r\n  loadExampleImage = () => {\r\n    this.image.src = \"./example.png\";\r\n  };\r\n\r\n  getColorsAt = (startX: number, startY: number, width: number, height: number) => {\r\n    const { preview, colors } = this;\r\n\r\n    const targetColors = [];\r\n\r\n    for (let y = startY; y < startY + height; y++) {\r\n      for (let x = startX; x < startX + width; x++) {\r\n        const i = y * preview.width + x;\r\n\r\n        if (i < 0 || i > colors.length) continue;\r\n\r\n        targetColors.push(colors[i]);\r\n      }\r\n    }\r\n\r\n    return targetColors;\r\n  };\r\n\r\n  setBackgroundColor = (color: Color) => {\r\n    if (color.a === 0) delete this.backgroundColor;\r\n    else this.backgroundColor = color;\r\n\r\n    this.handleUpdateImage();\r\n  };\r\n\r\n  setOpacity = (opacity: number) => {\r\n    if (opacity === 1) delete this.opacity;\r\n    else this.opacity = opacity;\r\n\r\n    this.handleUpdateImage();\r\n  };\r\n}\r\n","import Color from \"./Color\";\r\nimport Options from \"./Options\";\r\n\r\ntype resultElementInfo = {\r\n  textElement: HTMLInputElement;\r\n  foregroundElement: HTMLElement;\r\n  backgroundElement: HTMLElement;\r\n};\r\n\r\nexport default class Results {\r\n  readonly resultElementArray: resultElementInfo[];\r\n  readonly resultElementHashmap: { [key: string]: resultElementInfo };\r\n\r\n  constructor(resultFields: HTMLElement[]) {\r\n    this.resultElementArray = [];\r\n    this.resultElementHashmap = {};\r\n\r\n    resultFields.forEach((resultField) => {\r\n      const textElement = resultField.querySelector(\"input[type=text]\") as HTMLInputElement;\r\n      const foregroundElement = resultField.querySelector(\".foreground\") as HTMLElement;\r\n      const backgroundElement = resultField.querySelector(\".background\") as HTMLElement;\r\n      const copyButton = resultField.querySelector(\".copy\");\r\n\r\n      if (copyButton) {\r\n        copyButton.addEventListener(\"click\", (e) => {\r\n          e.preventDefault();\r\n          navigator.clipboard.writeText(textElement.value);\r\n        });\r\n      }\r\n\r\n      const proxiedTextElement = new Proxy(textElement, {\r\n        set: (target, name, value) => {\r\n          if (name === \"value\") foregroundElement.style.backgroundColor = value;\r\n\r\n          // @ts-expect-error continue with default behavior\r\n          target[name] = value;\r\n          return true;\r\n        },\r\n      });\r\n\r\n      const name = textElement.name.split(\"ResultText\")[0];\r\n      const info = {\r\n        textElement: proxiedTextElement,\r\n        foregroundElement,\r\n        backgroundElement,\r\n      };\r\n\r\n      this.resultElementHashmap[name] = info;\r\n      this.resultElementArray.push(info);\r\n    });\r\n  }\r\n\r\n  setBackgroundColor = (color: Color) => {\r\n    const { resultElementArray } = this;\r\n\r\n    const backgroundColor = color.toRgba();\r\n\r\n    resultElementArray.forEach((info) => {\r\n      info.backgroundElement.style.backgroundColor = backgroundColor;\r\n    });\r\n  };\r\n\r\n  setResult = (type: string, color: Color, options: Options) => {\r\n    const { resultElementHashmap } = this;\r\n    const resultFormat = options.resultFormat;\r\n    const hideAlphaChannel = options.hideAlphaChannel;\r\n\r\n    let includeAlpha = false;\r\n    if (hideAlphaChannel === \"always\") includeAlpha = false;\r\n    else if (hideAlphaChannel === \"never\") includeAlpha = true;\r\n    else if (color.a !== 255) includeAlpha = true;\r\n\r\n    let value = \"\";\r\n\r\n    if (resultFormat === \"rgb\") value = includeAlpha ? color.toRgba() : color.toRgb();\r\n    if (resultFormat === \"hex\") value = includeAlpha ? color.toHex8() : color.toHex6();\r\n    if (resultFormat === \"hsl\") value = includeAlpha ? color.toHsla() : color.toHsl();\r\n\r\n    if (!value) throw `Invalid resultFormat option: ${resultFormat.toString()}`;\r\n\r\n    resultElementHashmap[type].textElement.value = value;\r\n  };\r\n}\r\n","import { debounce } from \"./Util\";\r\n\r\nexport default class Selection {\r\n  readonly outline: HTMLElement;\r\n  readonly target: HTMLCanvasElement;\r\n\r\n  callback: (() => void) | undefined;\r\n\r\n  private isInProgress = false;\r\n  private startPosition = { x: 0, y: 0 };\r\n  private endPosition = { x: 0, y: 0 };\r\n\r\n  info:\r\n    | {\r\n        top: number;\r\n        left: number;\r\n        bottom: number;\r\n        right: number;\r\n        width: number;\r\n        height: number;\r\n      }\r\n    | undefined;\r\n\r\n  constructor(borderElement: HTMLElement, targetElement: HTMLCanvasElement, callback?: () => void) {\r\n    targetElement.onmousedown = this.handleSelect;\r\n    targetElement.onmouseup = this.handleSelect;\r\n    targetElement.onmousemove = this.handleSelect;\r\n    targetElement.onmouseleave = this.handleSelect;\r\n\r\n    targetElement.ontouchstart = this.handleTouch;\r\n    targetElement.ontouchend = this.handleTouch;\r\n    targetElement.ontouchmove = this.handleTouch;\r\n\r\n    this.outline = borderElement;\r\n    this.target = targetElement;\r\n\r\n    if (callback) this.onSelectionEnd = callback;\r\n  }\r\n\r\n  handleTouch = (e: TouchEvent) => {\r\n    const { targetTouches, changedTouches, type } = e;\r\n\r\n    if (targetTouches.length !== 2) return;\r\n    else e.preventDefault();\r\n\r\n    const { target, updateInfo, updateOutline, callback } = this;\r\n\r\n    const touches = type === \"touchend\" ? changedTouches : targetTouches;\r\n    const boundingRect = target.getBoundingClientRect();\r\n\r\n    const x1 = Math.round(touches[0].clientX - boundingRect.left);\r\n    const y1 = Math.round(touches[0].clientY - boundingRect.top);\r\n\r\n    const x2 = Math.round(touches[1].clientX - boundingRect.left);\r\n    const y2 = Math.round(touches[1].clientY - boundingRect.top);\r\n\r\n    this.startPosition = { x: x1, y: y1 };\r\n    this.endPosition = { x: x2, y: y2 };\r\n\r\n    updateInfo();\r\n    updateOutline();\r\n\r\n    if (callback) callback();\r\n  };\r\n\r\n  handleSelect = (e: MouseEvent) => {\r\n    const { type, button, clientX, clientY } = e;\r\n    const { target, isInProgress, updateInfo, updateOutline, callback } = this;\r\n\r\n    if (button !== null && button !== 0) return;\r\n\r\n    const boundingRect = target.getBoundingClientRect();\r\n    const x = Math.round(clientX - boundingRect.left);\r\n    const y = Math.round(clientY - boundingRect.top);\r\n\r\n    if (type === \"mousedown\") {\r\n      this.startPosition = { x, y };\r\n      this.isInProgress = true;\r\n      return;\r\n    }\r\n\r\n    if (!isInProgress) return;\r\n\r\n    if (type === \"mousemove\" || type === \"mouseup\" || type === \"mouseleave\") {\r\n      this.endPosition = { x, y };\r\n\r\n      updateInfo();\r\n      updateOutline();\r\n\r\n      if (callback) callback();\r\n    }\r\n\r\n    if (type === \"mouseup\" || type === \"mouseleave\") this.isInProgress = false;\r\n  };\r\n\r\n  set onSelectionEnd(callback: () => void) {\r\n    this.callback = debounce(callback);\r\n  }\r\n\r\n  updateInfo = () => {\r\n    const { startPosition, endPosition, target } = this;\r\n\r\n    const top = Math.max(Math.min(startPosition.y, endPosition.y), 0);\r\n    const left = Math.max(Math.min(startPosition.x, endPosition.x), 0);\r\n    const bottom = Math.min(Math.max(startPosition.y, endPosition.y), target.height);\r\n    const right = Math.min(Math.max(startPosition.x, endPosition.x), target.width);\r\n\r\n    const width = Math.max(right - left, 1);\r\n    const height = Math.max(bottom - top, 1);\r\n\r\n    this.info = { top, left, bottom, right, width, height };\r\n  };\r\n\r\n  updateOutline = () => {\r\n    const { outline, info } = this;\r\n\r\n    if (!info) return;\r\n\r\n    const { top, left, width, height } = info;\r\n\r\n    const cssText = `top:${top}px; left:${left}px; width:${width}px; height:${height}px;`;\r\n\r\n    outline.style.cssText = cssText;\r\n  };\r\n\r\n  clear = () => {\r\n    const { outline } = this;\r\n\r\n    outline.style.cssText = \"\";\r\n\r\n    delete this.info;\r\n  };\r\n}\r\n","export const debounce = (func: (...args: any[]) => any, timeout = 150) => {\r\n  let timer: number;\r\n\r\n  return (...args: any[]) => {\r\n    clearTimeout(timer);\r\n    timer = setTimeout(() => func.apply(this, args), timeout);\r\n  };\r\n};\r\n\r\nexport const round = (value: number, decimalPlaces = 0) =>\r\n  +(Math.round(+(value + `e+${decimalPlaces}`)) + `e-${decimalPlaces}`);\r\n\r\nexport const clamp = (value: number, min: number, max: number) =>\r\n  Math.max(Math.min(value, max), min);\r\n","import Color from \"./classes/Color\";\r\nimport Options from \"./classes/Options\";\r\nimport Preview from \"./classes/Preview\";\r\nimport Selection from \"./classes/Selection\";\r\nimport Results from \"./classes/Results\";\r\n\r\nfunction init() {\r\n  const $ = (selector: string): HTMLElement[] => Array.from(document.querySelectorAll(selector));\r\n\r\n  const optionsForm = $(\".options\")[0] as HTMLFormElement;\r\n  const resultsForm = $(\".results\")[0] as HTMLFormElement;\r\n\r\n  optionsForm.reset();\r\n  resultsForm.reset();\r\n\r\n  optionsForm.addEventListener(\"submit\", (e) => {\r\n    e.preventDefault();\r\n    calculate();\r\n  });\r\n\r\n  const optionFields = $(\".options :is(input, select)\") as (HTMLInputElement | HTMLSelectElement)[];\r\n  const resultFields = $(\".results .field\") as HTMLInputElement[];\r\n\r\n  const previewElement = $(\".preview\")[0] as HTMLCanvasElement;\r\n  const uploaderElement = $(\"input[name=imageUpload]\")[0] as HTMLInputElement;\r\n  const selectorElement = $(\".selector\")[0];\r\n\r\n  const options = new Options(optionFields);\r\n  const preview = new Preview(previewElement, uploaderElement);\r\n  const results = new Results(resultFields);\r\n  const selection = new Selection(selectorElement, previewElement);\r\n\r\n  const calculate = () => {\r\n    if (!selection.info) return;\r\n\r\n    const { top, left, width, height } = selection.info;\r\n\r\n    const selectedColors = preview.getColorsAt(left, top, width, height);\r\n\r\n    const [meanColor, medianColor] = Color.getMeanMedian(selectedColors, options);\r\n    const [lightestColor, darkestColor] = Color.getLightestDarkest(selectedColors);\r\n\r\n    results.setResult(\"mean\", meanColor, options);\r\n    results.setResult(\"median\", medianColor, options);\r\n    results.setResult(\"lightest\", lightestColor, options);\r\n    results.setResult(\"darkest\", darkestColor, options);\r\n  };\r\n\r\n  uploaderElement.addEventListener(\"change\", selection.clear);\r\n\r\n  const exampleImageButton = $(\"#example-image-button\")[0];\r\n  const resetButton = $(\"button[type=reset]\")[0];\r\n\r\n  exampleImageButton.addEventListener(\"click\", () => {\r\n    selection.clear();\r\n    preview.loadExampleImage();\r\n  });\r\n\r\n  resetButton.addEventListener(\"click\", () => {\r\n    optionsForm.reset();\r\n    options.triggerAllBeforeChangeCallbacks();\r\n    calculate();\r\n  });\r\n\r\n  options.onBeforeChange(\"opacityPercentage\", () => {\r\n    const opacityPercent = options.opacityPercentage;\r\n\r\n    preview.setOpacity(opacityPercent / 100);\r\n  });\r\n\r\n  const handleBackgroundSettingsChanged = () => {\r\n    const transparencyType = options.transparencyType;\r\n\r\n    let backgroundColor = null;\r\n\r\n    if (transparencyType === \"straight\") backgroundColor = new Color(0, 0, 0, 0);\r\n    if (transparencyType === \"premultiplied\") backgroundColor = new Color(options.backgroundColor);\r\n\r\n    if (!backgroundColor) throw `Invalid transparency type option: ${transparencyType.toString()}`;\r\n\r\n    preview.setBackgroundColor(backgroundColor),\r\n      results.setBackgroundColor(backgroundColor),\r\n      calculate();\r\n  };\r\n\r\n  options.onBeforeChange(\"backgroundColor\", handleBackgroundSettingsChanged);\r\n  options.onBeforeChange(\"transparencyType\", handleBackgroundSettingsChanged);\r\n\r\n  selection.onSelectionEnd = calculate;\r\n  options.onChange = calculate;\r\n}\r\n\r\nrequestAnimationFrame(init);\r\n"]}