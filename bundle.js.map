{"version":3,"sources":["node_modules/browser-pack/_prelude.js","compiled/classes/Color.js","compiled/classes/IsThisColourSimilar/Colour.js","compiled/classes/Options.js","compiled/classes/Preview.js","compiled/classes/Results.js","compiled/classes/Selection.js","compiled/classes/Util.js","compiled/index.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","Object","defineProperty","value","default","obj","_Colour","__esModule","_Util","Color","squaredValues","Array","keys","map","namedColorsLab","name","getMeanMedian","colors","options","averagingMethod","numberOfPixels","mean","median","colorChannels","let","channel","values","push","sortedValues","sort","totalSquaredValue","meanSquaredValue","meanValue","Math","sqrt","totalValue","medianIndex","floor","colorToLightness","getLightestDarkest","sRGBtoLinear","pow","lightestValue","darkestValue","lightestColor","darkestColor","forEach","color","colorId","g","b","lightness","luminance","blendColors","background","foreground","normalFgAlpha","normalBgAlpha","rgb","constructor","d","arguments","hex","this","parseInt","alpha","getClosedNamedColor","labA","rgb2lab","smallestDeltaE","closestColorName","namedColor","labB","deltaE","deltaE00","rgba","toRgb","round","join","toRgba","toString","slice","toHex6","toHex8","getHsl","nR","nG","nB","max","min","delta","hue","saturation","abs","toHsl","toHsla","Colour","x","y","z","rgb2xyz","xyz2lab","l","l1","a1","b1","l2","a2","b2","rad2deg","rad","PI","deg2rad","deg","avgL","avgC","a1p","a2p","c1p","c2p","avgCp","h1p","atan2","h2p","avghp","cos","deltahp","deltalp","deltacp","sin","sl","sc","sh","deltaro","exp","rt","Proxy","get","target","field","fieldHashmap","optionFields","callback","super","fieldArray","fieldToBeforeChangeCallback","onChange","restore","onBeforeChange","newBeforeChangeCallback","beforeChangeCallback","removeEventListener","addEventListener","triggerAllBeforeChangeCallbacks","save","optionsString","reduce","optionsObject","type","localStorage","setItem","JSON","stringify","getItem","parse","removeItem","newCallback","previewElement","uploaderElement","uploader","files","loadingToast","toast","handleReadUpload","preview","context","getContext","internalCanvas","OffscreenCanvas","document","createElement","internalContext","image","createImageBitmap","then","bitmap","imageBitmap","imageValues","handleUpdateImage","catch","_handleUpdateImage","debounce","resolve","opacity","backgroundColor","width","height","done","getImageData","data","setBackgroundColor","fillStyle","fillRect","clearRect","isNil","drawImage","_imageValues","Uint8ClampedArray","putImageData","ImageData","Promise","loadExampleImage","Image","onload","src","getColorsAt","async","startX","startY","resolvedColors","await","targetColors","setOpacity","resultFields","resultElementArray","resultElementHashmap","resultField","textElement","querySelector","foregroundElement","backgroundElement","copyButton","proxiedTextElement","preventDefault","navigator","clipboard","writeText","set","style","split","info","setResult","resultFormat","hideAlphaChannel","includeAlpha","isInProgress","startPosition","endPosition","borderElement","targetElement","handleSelect","passive","handleTouch","outline","onSelectionEnd","updateInfo","updateOutline","x2","targetTouches","changedTouches","touches","boundingRect","getBoundingClientRect","x1","clientX","left","y1","clientY","top","y2","button","bottom","right","cssText","clear","clamp","func","timeout","undefined","timer","_len","args","_key","clearTimeout","setTimeout","apply","decimalPlaces","message","persist","toastContainer","textContent","className","setAttribute","appendChild","requestAnimationFrame","removeChild","_Color","_interopRequireDefault","_Options","_Preview","_Selection","_Results","init","$","selector","from","querySelectorAll","optionsForm","resultsForm","reset","calculate","selectorElement","results","selection","meanColor","medianColor","selectedColors","exampleImageButton","resetButton","saveButton","downloadButton","hideToast","href","toDataURL","download","click","opacityPercent","opacityPercentage","handleBackgroundSettingsChanged","transparencyType","toLowerCase","trim","window"],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _Colour = _interopRequireDefault(require(\"./IsThisColourSimilar/Colour.js\"));\nvar _Util = require(\"./Util.js\");\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nclass Color {\n  static squaredValues = [...Array(256).keys()].map(value => value * value);\n  static namedColorsLab = [{\n    name: \"aliceblue\",\n    value: [97.18, -1.34, -4.27]\n  }, {\n    name: \"antiquewhite\",\n    value: [93.73, 1.84, 11.52]\n  }, {\n    name: \"aqua\",\n    value: [91.12, -48.08, -14.14]\n  }, {\n    name: \"aquamarine\",\n    value: [92.04, -45.52, 9.71]\n  }, {\n    name: \"azure\",\n    value: [98.93, -4.88, -1.7]\n  }, {\n    name: \"beige\",\n    value: [95.95, -4.19, 12.04]\n  }, {\n    name: \"bisque\",\n    value: [92.01, 4.43, 19]\n  }, {\n    name: \"black\",\n    value: [0, 0, 0]\n  }, {\n    name: \"blanchedalmond\",\n    value: [93.92, 2.13, 17.02]\n  }, {\n    name: \"blue\",\n    value: [32.3, 79.2, -107.86]\n  }, {\n    name: \"blueviolet\",\n    value: [42.19, 69.86, -74.77]\n  }, {\n    name: \"brown\",\n    value: [37.52, 49.7, 30.54]\n  }, {\n    name: \"burlywood\",\n    value: [77.02, 7.05, 30.01]\n  }, {\n    name: \"cadetblue\",\n    value: [61.15, -19.68, -7.43]\n  }, {\n    name: \"chartreuse\",\n    value: [89.87, -68.07, 85.78]\n  }, {\n    name: \"chocolate\",\n    value: [55.99, 37.06, 56.74]\n  }, {\n    name: \"coral\",\n    value: [67.29, 45.36, 47.49]\n  }, {\n    name: \"cornflowerblue\",\n    value: [61.93, 9.34, -49.31]\n  }, {\n    name: \"cornsilk\",\n    value: [97.46, -2.21, 14.28]\n  }, {\n    name: \"crimson\",\n    value: [47.03, 70.94, 33.59]\n  }, {\n    name: \"cyan\",\n    value: [91.12, -48.08, -14.14]\n  }, {\n    name: \"darkblue\",\n    value: [14.76, 50.43, -68.68]\n  }, {\n    name: \"darkcyan\",\n    value: [52.21, -30.62, -9]\n  }, {\n    name: \"darkgoldenrod\",\n    value: [59.22, 9.87, 62.73]\n  }, {\n    name: \"darkgray\",\n    value: [69.24, 0, -0.01]\n  }, {\n    name: \"darkgreen\",\n    value: [36.2, -43.37, 41.86]\n  }, {\n    name: \"darkgrey\",\n    value: [69.24, 0, -0.01]\n  }, {\n    name: \"darkkhaki\",\n    value: [73.38, -8.79, 39.29]\n  }, {\n    name: \"darkmagenta\",\n    value: [32.6, 62.56, -38.74]\n  }, {\n    name: \"darkolivegreen\",\n    value: [42.23, -18.83, 30.6]\n  }, {\n    name: \"darkorange\",\n    value: [69.48, 36.83, 75.49]\n  }, {\n    name: \"darkorchid\",\n    value: [43.38, 65.17, -60.11]\n  }, {\n    name: \"darkred\",\n    value: [28.08, 51.01, 41.29]\n  }, {\n    name: \"darksalmon\",\n    value: [69.85, 28.18, 27.7]\n  }, {\n    name: \"darkseagreen\",\n    value: [72.09, -23.82, 18.03]\n  }, {\n    name: \"darkslateblue\",\n    value: [30.83, 26.06, -42.09]\n  }, {\n    name: \"darkslategray\",\n    value: [31.26, -11.72, -3.73]\n  }, {\n    name: \"darkslategrey\",\n    value: [31.26, -11.72, -3.73]\n  }, {\n    name: \"darkturquoise\",\n    value: [75.29, -40.04, -13.52]\n  }, {\n    name: \"darkviolet\",\n    value: [39.58, 76.34, -70.38]\n  }, {\n    name: \"deeppink\",\n    value: [55.95, 84.56, -5.71]\n  }, {\n    name: \"deepskyblue\",\n    value: [72.55, -17.65, -42.55]\n  }, {\n    name: \"dimgray\",\n    value: [44.41, 0, -0.01]\n  }, {\n    name: \"dimgrey\",\n    value: [44.41, 0, -0.01]\n  }, {\n    name: \"dodgerblue\",\n    value: [59.38, 9.97, -63.39]\n  }, {\n    name: \"firebrick\",\n    value: [39.11, 55.93, 37.65]\n  }, {\n    name: \"floralwhite\",\n    value: [98.4, -0.03, 5.37]\n  }, {\n    name: \"forestgreen\",\n    value: [50.59, -49.59, 45.02]\n  }, {\n    name: \"fuchsia\",\n    value: [60.32, 98.25, -60.84]\n  }, {\n    name: \"gainsboro\",\n    value: [87.76, 0, -0.01]\n  }, {\n    name: \"ghostwhite\",\n    value: [97.76, 1.25, -3.36]\n  }, {\n    name: \"gold\",\n    value: [86.93, -1.92, 87.14]\n  }, {\n    name: \"goldenrod\",\n    value: [70.82, 8.52, 68.76]\n  }, {\n    name: \"gray\",\n    value: [53.59, 0, -0.01]\n  }, {\n    name: \"green\",\n    value: [46.23, -51.7, 49.9]\n  }, {\n    name: \"greenyellow\",\n    value: [91.96, -52.48, 81.87]\n  }, {\n    name: \"grey\",\n    value: [53.59, 0, -0.01]\n  }, {\n    name: \"honeydew\",\n    value: [98.57, -7.56, 5.47]\n  }, {\n    name: \"hotpink\",\n    value: [65.48, 64.25, -10.66]\n  }, {\n    name: \"indianred\",\n    value: [53.39, 44.84, 22.11]\n  }, {\n    name: \"indigo\",\n    value: [20.47, 51.69, -53.32]\n  }, {\n    name: \"ivory\",\n    value: [99.64, -2.55, 7.15]\n  }, {\n    name: \"khaki\",\n    value: [90.33, -9.01, 44.97]\n  }, {\n    name: \"lavender\",\n    value: [91.83, 3.71, -9.67]\n  }, {\n    name: \"lavenderblush\",\n    value: [96.07, 5.89, -0.6]\n  }, {\n    name: \"lawngreen\",\n    value: [88.88, -67.86, 84.95]\n  }, {\n    name: \"lemonchiffon\",\n    value: [97.65, -5.42, 22.23]\n  }, {\n    name: \"lightblue\",\n    value: [83.81, -10.89, -11.49]\n  }, {\n    name: \"lightcoral\",\n    value: [66.15, 42.82, 19.55]\n  }, {\n    name: \"lightcyan\",\n    value: [97.87, -9.94, -3.38]\n  }, {\n    name: \"lightgoldenrodyellow\",\n    value: [97.37, -6.48, 19.23]\n  }, {\n    name: \"lightgray\",\n    value: [84.56, 0, -0.01]\n  }, {\n    name: \"lightgreen\",\n    value: [86.55, -46.33, 36.94]\n  }, {\n    name: \"lightgrey\",\n    value: [84.56, 0, -0.01]\n  }, {\n    name: \"lightpink\",\n    value: [81.05, 27.97, 5.03]\n  }, {\n    name: \"lightsalmon\",\n    value: [74.7, 31.48, 34.54]\n  }, {\n    name: \"lightseagreen\",\n    value: [65.79, -37.51, -6.34]\n  }, {\n    name: \"lightskyblue\",\n    value: [79.73, -10.82, -28.51]\n  }, {\n    name: \"lightslategray\",\n    value: [55.92, -2.24, -11.11]\n  }, {\n    name: \"lightslategrey\",\n    value: [55.92, -2.24, -11.11]\n  }, {\n    name: \"lightsteelblue\",\n    value: [78.45, -1.28, -15.22]\n  }, {\n    name: \"lightyellow\",\n    value: [99.28, -5.1, 14.83]\n  }, {\n    name: \"lime\",\n    value: [87.74, -86.18, 83.18]\n  }, {\n    name: \"limegreen\",\n    value: [72.61, -67.13, 61.44]\n  }, {\n    name: \"linen\",\n    value: [95.31, 1.68, 6.01]\n  }, {\n    name: \"magenta\",\n    value: [60.32, 98.25, -60.84]\n  }, {\n    name: \"maroon\",\n    value: [25.53, 48.06, 38.06]\n  }, {\n    name: \"mediumaquamarine\",\n    value: [75.69, -38.33, 8.3]\n  }, {\n    name: \"mediumblue\",\n    value: [24.98, 67.18, -91.5]\n  }, {\n    name: \"mediumorchid\",\n    value: [53.64, 59.07, -47.41]\n  }, {\n    name: \"mediumpurple\",\n    value: [54.98, 36.81, -50.1]\n  }, {\n    name: \"mediumseagreen\",\n    value: [65.27, -48.22, 24.29]\n  }, {\n    name: \"mediumslateblue\",\n    value: [52.16, 41.08, -65.41]\n  }, {\n    name: \"mediumspringgreen\",\n    value: [87.34, -70.68, 32.46]\n  }, {\n    name: \"mediumturquoise\",\n    value: [76.88, -37.35, -8.36]\n  }, {\n    name: \"mediumvioletred\",\n    value: [44.76, 71.01, -15.18]\n  }, {\n    name: \"midnightblue\",\n    value: [15.86, 31.72, -49.58]\n  }, {\n    name: \"mintcream\",\n    value: [99.16, -4.16, 1.24]\n  }, {\n    name: \"mistyrose\",\n    value: [92.66, 8.75, 4.83]\n  }, {\n    name: \"moccasin\",\n    value: [91.72, 2.44, 26.35]\n  }, {\n    name: \"navajowhite\",\n    value: [90.1, 4.51, 28.26]\n  }, {\n    name: \"navy\",\n    value: [12.98, 47.51, -64.7]\n  }, {\n    name: \"oldlace\",\n    value: [96.78, 0.18, 8.16]\n  }, {\n    name: \"olive\",\n    value: [51.87, -12.93, 56.68]\n  }, {\n    name: \"olivedrab\",\n    value: [54.65, -28.22, 49.69]\n  }, {\n    name: \"orange\",\n    value: [74.93, 23.94, 78.96]\n  }, {\n    name: \"orangered\",\n    value: [57.57, 67.8, 68.97]\n  }, {\n    name: \"orchid\",\n    value: [62.8, 55.29, -34.42]\n  }, {\n    name: \"palegoldenrod\",\n    value: [91.14, -7.35, 30.96]\n  }, {\n    name: \"palegreen\",\n    value: [90.75, -48.3, 38.52]\n  }, {\n    name: \"paleturquoise\",\n    value: [90.06, -19.63, -6.41]\n  }, {\n    name: \"palevioletred\",\n    value: [60.56, 45.53, 0.39]\n  }, {\n    name: \"papayawhip\",\n    value: [95.08, 1.27, 14.52]\n  }, {\n    name: \"peachpuff\",\n    value: [89.35, 8.09, 21.01]\n  }, {\n    name: \"peru\",\n    value: [61.75, 21.4, 47.92]\n  }, {\n    name: \"pink\",\n    value: [83.58, 24.15, 3.32]\n  }, {\n    name: \"plum\",\n    value: [73.37, 32.54, -22]\n  }, {\n    name: \"powderblue\",\n    value: [86.13, -14.09, -8.02]\n  }, {\n    name: \"purple\",\n    value: [29.78, 58.94, -36.5]\n  }, {\n    name: \"red\",\n    value: [53.23, 80.11, 67.22]\n  }, {\n    name: \"rosybrown\",\n    value: [63.61, 17.02, 6.6]\n  }, {\n    name: \"royalblue\",\n    value: [47.83, 26.27, -65.27]\n  }, {\n    name: \"saddlebrown\",\n    value: [37.47, 26.45, 40.99]\n  }, {\n    name: \"salmon\",\n    value: [67.26, 45.23, 29.09]\n  }, {\n    name: \"sandybrown\",\n    value: [73.95, 23.03, 46.79]\n  }, {\n    name: \"seagreen\",\n    value: [51.54, -39.71, 20.05]\n  }, {\n    name: \"seashell\",\n    value: [97.12, 2.17, 4.54]\n  }, {\n    name: \"sienna\",\n    value: [43.8, 29.33, 35.64]\n  }, {\n    name: \"silver\",\n    value: [77.7, 0, -0.01]\n  }, {\n    name: \"skyblue\",\n    value: [79.21, -14.83, -21.28]\n  }, {\n    name: \"slateblue\",\n    value: [45.34, 36.05, -57.78]\n  }, {\n    name: \"slategray\",\n    value: [52.84, -2.14, -10.58]\n  }, {\n    name: \"slategrey\",\n    value: [52.84, -2.14, -10.58]\n  }, {\n    name: \"snow\",\n    value: [98.64, 1.66, 0.58]\n  }, {\n    name: \"springgreen\",\n    value: [88.47, -76.9, 47.03]\n  }, {\n    name: \"steelblue\",\n    value: [52.47, -4.07, -32.2]\n  }, {\n    name: \"tan\",\n    value: [74.97, 5.02, 24.42]\n  }, {\n    name: \"teal\",\n    value: [48.26, -28.84, -8.48]\n  }, {\n    name: \"thistle\",\n    value: [80.08, 13.22, -9.24]\n  }, {\n    name: \"tomato\",\n    value: [62.2, 57.86, 46.42]\n  }, {\n    name: \"turquoise\",\n    value: [81.27, -44.08, -4.03]\n  }, {\n    name: \"violet\",\n    value: [69.69, 56.37, -36.82]\n  }, {\n    name: \"wheat\",\n    value: [89.35, 1.51, 24]\n  }, {\n    name: \"white\",\n    value: [100, 0.01, -0.01]\n  }, {\n    name: \"whitesmoke\",\n    value: [96.54, 0.01, -0.01]\n  }, {\n    name: \"yellow\",\n    value: [97.14, -21.56, 94.48]\n  }, {\n    name: \"yellowgreen\",\n    value: [76.54, -37.99, 66.59]\n  }];\n  static getMeanMedian = (colors, options) => {\n    const averagingMethod = options.averagingMethod;\n    const numberOfPixels = colors.length;\n    const mean = new Color();\n    const median = new Color();\n    if (numberOfPixels === 0) return [mean, median];\n    const colorChannels = [\"r\", \"g\", \"b\", \"a\"];\n    for (let i = 0; i < colorChannels.length; i++) {\n      const channel = colorChannels[i];\n      const values = [];\n      for (let i = 0; i < colors.length; i++) values.push(colors[i][channel]);\n      const sortedValues = values.sort();\n      if (averagingMethod === \"squared\") {\n        let totalSquaredValue = 0;\n        for (let i = 0; i < values.length; i++) totalSquaredValue += Color.squaredValues[values[i]];\n        const meanSquaredValue = totalSquaredValue / numberOfPixels;\n        const meanValue = Math.sqrt(meanSquaredValue);\n        mean[channel] = meanValue;\n      }\n      if (averagingMethod === \"simple\") {\n        let totalValue = 0;\n        for (let i = 0; i < values.length; i++) totalValue += values[i];\n        const meanValue = totalValue / numberOfPixels;\n        mean[channel] = meanValue;\n      }\n      const medianIndex = Math.floor(sortedValues.length / 2);\n      median[channel] = sortedValues[medianIndex];\n    }\n    return [mean, median];\n  };\n  static colorToLightness = {};\n  static getLightestDarkest = colors => {\n    if (colors.length === 0) return [new Color(), new Color()];\n    const sRGBtoLinear = channel => {\n      if (channel <= 0.04045) return channel / 12.92;\n      return Math.pow((channel + 0.055) / 1.055, 2.4);\n    };\n    const getLightness = color => {\n      const lR = sRGBtoLinear(color.r / 255);\n      const lG = sRGBtoLinear(color.g / 255);\n      const lB = sRGBtoLinear(color.b / 255);\n      const luminance = 0.2126 * lR + 0.7152 * lG + 0.0722 * lB;\n      if (luminance <= 216 / 24389) return luminance * (24389 / 27);\n      return Math.pow(luminance, 1 / 3) * 116 - 16;\n    };\n    let lightestValue = 101;\n    let darkestValue = -1;\n    let lightestColor = colors[0];\n    let darkestColor = colors[0];\n    colors.forEach(color => {\n      const colorId = `${color.r}-${color.g}-${color.b}`;\n      let lightness = Color.colorToLightness[colorId];\n      if (!lightness) Color.colorToLightness[colorId] = lightness = getLightness(color);\n      if (lightness < lightestValue) {\n        lightestValue = lightness;\n        lightestColor = color;\n      }\n      if (lightness > darkestValue) {\n        darkestValue = lightness;\n        darkestColor = color;\n      }\n    });\n    return [new Color(lightestColor.r, lightestColor.g, lightestColor.b, lightestColor.a), new Color(darkestColor.r, darkestColor.g, darkestColor.b, darkestColor.a)];\n  };\n  static blendColors = (background, foreground) => {\n    const normalFgAlpha = foreground.a / 255;\n    const normalBgAlpha = 1 - normalFgAlpha;\n    const channels = [\"r\", \"g\", \"b\"];\n    const rgb = channels.map(c => background[c] * normalBgAlpha + foreground[c] * normalFgAlpha);\n    return new Color(...rgb);\n  };\n  r = 0; // 0-255\n  g = 0; // 0-255;\n  b = 0; // 0-255;\n  a = 0; // 0-255;\n\n  constructor(a, b, c, d) {\n    if (arguments.length === 1) {\n      if (typeof a === \"string\" && a[0] === \"#\") {\n        let hex = a;\n        if (hex.length === 4) hex = \"#\" + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3];\n        if (hex.length === 7 || hex.length === 9) {\n          this.r = parseInt(hex[1] + hex[2], 16);\n          this.g = parseInt(hex[3] + hex[4], 16);\n          this.b = parseInt(hex[5] + hex[6], 16);\n          if (hex.length === 9) this.a = parseInt(hex[7] + hex[8], 16);else this.a = 255;\n        }\n        return;\n      }\n    }\n    if (arguments.length === 3 || arguments.length === 4) {\n      const alpha = d == null ? 255 : d;\n      if (typeof a === \"number\" && typeof b === \"number\" && typeof c === \"number\") {\n        this.r = a;\n        this.g = b;\n        this.b = c;\n      }\n      this.a = alpha;\n    }\n  }\n  getClosedNamedColor = () => {\n    const {\n      r,\n      g,\n      b\n    } = this;\n    const labA = _Colour.default.rgb2lab(r, g, b);\n    let smallestDeltaE = 101;\n    let closestColorName = \"\";\n    Color.namedColorsLab.forEach(namedColor => {\n      const labB = namedColor.value;\n      const deltaE = _Colour.default.deltaE00(labA[0], labA[1], labA[2], labB[0], labB[1], labB[2]);\n      if (deltaE < smallestDeltaE) {\n        smallestDeltaE = deltaE;\n        closestColorName = namedColor.name;\n      }\n    });\n    return closestColorName;\n  };\n  get rgb() {\n    const {\n      r,\n      g,\n      b\n    } = this;\n    return [r, g, b];\n  }\n  get rgba() {\n    const {\n      r,\n      g,\n      b,\n      a\n    } = this;\n    return [r, g, b, a];\n  }\n  toRgb() {\n    const {\n      r,\n      g,\n      b\n    } = this;\n    const rgb = [r, g, b].map(value => Math.round(value));\n    return `rgb(${rgb.join(\", \")})`;\n  }\n  toRgba() {\n    const {\n      r,\n      g,\n      b,\n      a\n    } = this;\n    const rgba = [r, g, b].map(value => Math.round(value));\n    rgba.push((0, _Util.round)(a / 255, 2));\n    return `rgba(${rgba.join(\", \")})`;\n  }\n  hex = value => (\"0\" + Math.round(value).toString(16)).slice(-2);\n  toHex6() {\n    const {\n      r,\n      g,\n      b,\n      hex\n    } = this;\n    return \"#\" + hex(r) + hex(g) + hex(b);\n  }\n  toHex8() {\n    const {\n      r,\n      g,\n      b,\n      a,\n      hex\n    } = this;\n    return \"#\" + hex(r) + hex(g) + hex(b) + hex(a);\n  }\n  getHsl = () => {\n    const {\n      r,\n      g,\n      b\n    } = this;\n    const nR = r / 255;\n    const nG = g / 255;\n    const nB = b / 255;\n    const max = Math.max(nR, nG, nB);\n    const min = Math.min(nR, nG, nB);\n    const delta = max - min;\n    let hue, lightness, saturation;\n\n    // hue\n    if (delta === 0) hue = 0;else if (nR === max) hue = (nG - nB) / delta % 6;else if (nG === max) hue = (nB - nR) / delta + 2;else hue = (nR - nG) / delta + 4;\n    hue = Math.round(hue * 60);\n    if (hue < 0) hue += 360;\n\n    // lightness\n    lightness = (max + min) / 2;\n\n    // saturation\n    if (delta === 0) saturation = 0;else saturation = delta / (1 - Math.abs(2 * lightness - 1));\n    lightness = (0, _Util.round)(lightness * 100, 1);\n    saturation = (0, _Util.round)(saturation * 100, 1);\n    return [hue, saturation, lightness];\n  };\n  toHsl() {\n    const [hue, saturation, lightness] = this.getHsl();\n    return `hsl(${hue}, ${saturation}%, ${lightness}%)`;\n  }\n  toHsla() {\n    const {\n      a\n    } = this;\n    const [hue, saturation, lightness] = this.getHsl();\n    const alpha = (0, _Util.round)(a / 255, 2);\n    return `hsla(${hue}, ${saturation}%, ${lightness}%, ${alpha})`;\n  }\n}\nexports.default = Color;\n//# sourceMappingURL=Color.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n/**\r\n * Colour class\r\n * Represet the colour object and it's different types (HEX, RGBA, XYZ, LAB)\r\n * This class have the ability to do the following\r\n * 1. Convert HEX to RGBA\r\n * 2. Convert RGB to XYZ\r\n * 3. Convert XYZ to LAB\r\n * 4. Calculate Delta E00 between two LAB colour (Main purpose)\r\n * @author Ahmed Moussa <moussa.ahmed95@gmail.com>\r\n * @version 2.0\r\n */\nclass Colour {\n  /**\r\n   * Convert RGBA to LAB\r\n   * @param {Number} r     Red value from 0 to 255\r\n   * @param {Number} g     Green value from 0 to 255\r\n   * @param {Number} b     Blue value from 0 to 255\r\n   */\n  static rgb2lab(r, g, b) {\n    const [x, y, z] = Colour.rgb2xyz(r, g, b);\n    return Colour.xyz2lab(x, y, z); // [l, a, b]\n  }\n  /**\r\n   * Convert RGB to XYZ\r\n   * @param {Number} r     Red value from 0 to 255\r\n   * @param {Number} g     Green value from 0 to 255\r\n   * @param {Number} b     Blue value from 0 to 255\r\n   */\n  static rgb2xyz(r, g, b) {\n    r = r / 255;\n    g = g / 255;\n    b = b / 255;\n    // step 1\n    if (r > 0.04045) {\n      r = Math.pow((r + 0.055) / 1.055, 2.4);\n    } else {\n      r = r / 12.92;\n    }\n    if (g > 0.04045) {\n      g = Math.pow((g + 0.055) / 1.055, 2.4);\n    } else {\n      g = g / 12.92;\n    }\n    if (b > 0.04045) {\n      b = Math.pow((b + 0.055) / 1.055, 2.4);\n    } else {\n      b = b / 12.92;\n    }\n    // step 2\n    r = r * 100;\n    g = g * 100;\n    b = b * 100;\n    // step 3\n    const x = r * 0.4124564 + g * 0.3575761 + b * 0.1804375;\n    const y = r * 0.2126729 + g * 0.7151522 + b * 0.072175;\n    const z = r * 0.0193339 + g * 0.119192 + b * 0.9503041;\n    return [x, y, z];\n  }\n  /**\r\n   * Convert XYZ to LAB\r\n   * @param {Number} x Value\r\n   * @param {Number} y Value\r\n   * @param {Number} z Value\r\n   */\n  static xyz2lab(x, y, z) {\n    // using 10o Observer (CIE 1964)\n    // CIE10_D65 = {94.811f, 100f, 107.304f} => Daylight\n    const referenceX = 94.811;\n    const referenceY = 100;\n    const referenceZ = 107.304;\n    // step 1\n    x = x / referenceX;\n    y = y / referenceY;\n    z = z / referenceZ;\n    // step 2\n    if (x > 0.008856) {\n      x = Math.pow(x, 1 / 3);\n    } else {\n      x = 7.787 * x + 16 / 116;\n    }\n    if (y > 0.008856) {\n      y = Math.pow(y, 1 / 3);\n    } else {\n      y = 7.787 * y + 16 / 116;\n    }\n    if (z > 0.008856) {\n      z = Math.pow(z, 1 / 3);\n    } else {\n      z = 7.787 * z + 16 / 116;\n    }\n    // step 3\n    const l = 116 * y - 16;\n    const a = 500 * (x - y);\n    const b = 200 * (y - z);\n    return [l, a, b];\n  }\n  /**\r\n   * The difference between two given colours with respect to the human eye\r\n   * @param {number} l1 Colour 1\r\n   * @param {number} a1 Colour 1\r\n   * @param {number} b1 Colour 1\r\n   * @param {number} l2 Colour 2\r\n   * @param {number} a2 Colour 2\r\n   * @param {number} b2 Colour 2\r\n   */\n  static deltaE00(l1, a1, b1, l2, a2, b2) {\n    // Utility functions added to Math Object\n    const rad2deg = function (rad) {\n      return 360 * rad / (2 * Math.PI);\n    };\n    const deg2rad = function (deg) {\n      return 2 * Math.PI * deg / 360;\n    };\n    // Start Equation\n    // Equation exist on the following URL http://www.brucelindbloom.com/index.html?Eqn_DeltaE_CIE2000.html\n    const avgL = (l1 + l2) / 2;\n    const c1 = Math.sqrt(Math.pow(a1, 2) + Math.pow(b1, 2));\n    const c2 = Math.sqrt(Math.pow(a2, 2) + Math.pow(b2, 2));\n    const avgC = (c1 + c2) / 2;\n    const g = (1 - Math.sqrt(Math.pow(avgC, 7) / (Math.pow(avgC, 7) + Math.pow(25, 7)))) / 2;\n    const a1p = a1 * (1 + g);\n    const a2p = a2 * (1 + g);\n    const c1p = Math.sqrt(Math.pow(a1p, 2) + Math.pow(b1, 2));\n    const c2p = Math.sqrt(Math.pow(a2p, 2) + Math.pow(b2, 2));\n    const avgCp = (c1p + c2p) / 2;\n    let h1p = rad2deg(Math.atan2(b1, a1p));\n    if (h1p < 0) {\n      h1p = h1p + 360;\n    }\n    let h2p = rad2deg(Math.atan2(b2, a2p));\n    if (h2p < 0) {\n      h2p = h2p + 360;\n    }\n    const avghp = Math.abs(h1p - h2p) > 180 ? (h1p + h2p + 360) / 2 : (h1p + h2p) / 2;\n    const t = 1 - 0.17 * Math.cos(deg2rad(avghp - 30)) + 0.24 * Math.cos(deg2rad(2 * avghp)) + 0.32 * Math.cos(deg2rad(3 * avghp + 6)) - 0.2 * Math.cos(deg2rad(4 * avghp - 63));\n    let deltahp = h2p - h1p;\n    if (Math.abs(deltahp) > 180) {\n      if (h2p <= h1p) {\n        deltahp += 360;\n      } else {\n        deltahp -= 360;\n      }\n    }\n    const deltalp = l2 - l1;\n    const deltacp = c2p - c1p;\n    deltahp = 2 * Math.sqrt(c1p * c2p) * Math.sin(deg2rad(deltahp) / 2);\n    const sl = 1 + 0.015 * Math.pow(avgL - 50, 2) / Math.sqrt(20 + Math.pow(avgL - 50, 2));\n    const sc = 1 + 0.045 * avgCp;\n    const sh = 1 + 0.015 * avgCp * t;\n    const deltaro = 30 * Math.exp(-Math.pow((avghp - 275) / 25, 2));\n    const rc = 2 * Math.sqrt(Math.pow(avgCp, 7) / (Math.pow(avgCp, 7) + Math.pow(25, 7)));\n    const rt = -rc * Math.sin(2 * deg2rad(deltaro));\n    const kl = 1;\n    const kc = 1;\n    const kh = 1;\n    const deltaE = Math.sqrt(Math.pow(deltalp / (kl * sl), 2) + Math.pow(deltacp / (kc * sc), 2) + Math.pow(deltahp / (kh * sh), 2) + rt * (deltacp / (kc * sc)) * (deltahp / (kh * sh)));\n    return deltaE;\n  }\n}\nexports.default = Colour;\n//# sourceMappingURL=Colour.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nclass OptionsProxy {\n  constructor() {\n    return new Proxy(this, {\n      get: (target, name) => {\n        const field = target.fieldHashmap[name.toString()];\n        if (field) return field.value;\n        return target[name];\n      }\n    });\n  }\n}\nclass Options extends OptionsProxy {\n  constructor(optionFields, callback) {\n    super();\n    this.fieldArray = optionFields;\n    this.fieldHashmap = {};\n    this.fieldToBeforeChangeCallback = {};\n    optionFields.forEach(field => {\n      this.fieldHashmap[field.name] = field;\n    });\n    if (callback) this.onChange = callback;\n    this.restore();\n  }\n  onBeforeChange = (name, newBeforeChangeCallback) => {\n    const {\n      fieldHashmap,\n      fieldToBeforeChangeCallback,\n      callback\n    } = this;\n    const field = fieldHashmap[name];\n    if (!field) return;\n    const beforeChangeCallback = fieldToBeforeChangeCallback[name];\n    if (callback) field.removeEventListener(\"change\", callback);\n    if (beforeChangeCallback) field.removeEventListener(\"change\", beforeChangeCallback);\n    field.addEventListener(\"change\", newBeforeChangeCallback);\n    if (callback) field.addEventListener(\"change\", callback);\n    fieldToBeforeChangeCallback[name] = newBeforeChangeCallback;\n  };\n  triggerAllBeforeChangeCallbacks = () => {\n    const {\n      fieldArray,\n      fieldToBeforeChangeCallback\n    } = this;\n    fieldArray.forEach(field => {\n      const beforeChangeCallback = fieldToBeforeChangeCallback[field.name];\n      if (beforeChangeCallback) beforeChangeCallback();\n    });\n  };\n  save = () => {\n    const {\n      fieldArray\n    } = this;\n    const optionsString = fieldArray.reduce((optionsObject, field) => {\n      if (field.type !== \"file\") optionsObject[field.name] = field.value;\n      return optionsObject;\n    }, {});\n    localStorage.setItem(\"options\", JSON.stringify(optionsString));\n  };\n  restore = () => {\n    const {\n      fieldArray\n    } = this;\n    const optionsString = localStorage.getItem(\"options\");\n    if (!optionsString) return;\n    try {\n      const optionsObject = JSON.parse(optionsString);\n      fieldArray.forEach(field => {\n        if (optionsObject[field.name]) field.value = optionsObject[field.name];\n      });\n    } catch (e) {\n      localStorage.removeItem(\"options\");\n    }\n  };\n  set onChange(newCallback) {\n    const {\n      fieldArray,\n      callback\n    } = this;\n    fieldArray.forEach(field => {\n      if (callback) field.removeEventListener(\"change\", callback);\n      field.addEventListener(\"change\", newCallback);\n    });\n    this.callback = newCallback;\n  }\n}\nexports.default = Options;\n//# sourceMappingURL=Options.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _Util = require(\"./Util.js\");\nclass Preview {\n  constructor(previewElement, uploaderElement) {\n    uploaderElement.addEventListener(\"change\", () => {\n      const {\n        uploader\n      } = this;\n      if (!uploader.files) return;\n      this.loadingToast = (0, _Util.toast)(\"Loading selected image...\", true);\n      this.handleReadUpload(uploader.files[0]);\n    });\n    this.preview = previewElement;\n    this.uploader = uploaderElement;\n    const context = previewElement.getContext(\"2d\");\n    if (!context) throw \"Failed to get 2D context from canvas element.\";\n    this.context = context;\n    const internalCanvas = typeof OffscreenCanvas !== \"undefined\" ? new OffscreenCanvas(0, 0) : document.createElement(\"canvas\");\n    const internalContext = internalCanvas.getContext(\"2d\");\n    if (!internalContext) throw \"Failed to get 2D context from offscreen canvas.\";\n    this.internalCanvas = internalCanvas;\n    this.internalContext = internalContext;\n  }\n  handleReadUpload = image => {\n    createImageBitmap(image).then(bitmap => {\n      this.imageBitmap = bitmap;\n      delete this.imageValues;\n      this.handleUpdateImage();\n    }).catch(() => {\n      const {\n        loadingToast\n      } = this;\n      if (loadingToast) loadingToast();\n      delete this.loadingToast;\n      (0, _Util.toast)(\"Unable to load selected file\");\n    });\n  };\n  _handleUpdateImage = (0, _Util.debounce)(resolve => {\n    const {\n      preview,\n      context,\n      internalCanvas,\n      internalContext,\n      imageBitmap\n    } = this;\n    const {\n      opacity,\n      backgroundColor\n    } = this;\n    let width = 300;\n    let height = 200;\n    if (imageBitmap) {\n      width = imageBitmap.width;\n      height = imageBitmap.height;\n    }\n    preview.width = internalCanvas.width = width;\n    preview.height = internalCanvas.height = height;\n\n    // Always called before exit\n    const done = colors => {\n      const {\n        loadingToast\n      } = this;\n      if (loadingToast) loadingToast();\n      delete this.loadingToast;\n      resolve(colors || context.getImageData(0, 0, width, height).data);\n    };\n    const setBackgroundColor = () => {\n      if (backgroundColor) {\n        context.fillStyle = \"rgba(0, 0, 0, 0)\";\n        context.fillStyle = backgroundColor;\n        context.fillRect(0, 0, width, height);\n      }\n    };\n    context.clearRect(0, 0, width, height);\n\n    // If no image, just set background color if any and return\n    if (!imageBitmap) return setBackgroundColor(), done();\n\n    // If no imageValues, draw first so we can get imageValue from it\n    // If no processing, draw and done\n    if (!this.imageValues || (0, _Util.isNil)(opacity) && (0, _Util.isNil)(backgroundColor)) {\n      context.drawImage(imageBitmap, 0, 0);\n    }\n    if (!this.imageValues) this.imageValues = context.getImageData(0, 0, width, height).data;\n    if ((0, _Util.isNil)(opacity) && (0, _Util.isNil)(backgroundColor)) return done(this.imageValues);\n\n    // Clone imageValue, don't want to manipulate the original\n    const _imageValues = new Uint8ClampedArray(this.imageValues);\n\n    // Set opacity\n    if (!(0, _Util.isNil)(opacity)) {\n      for (let i = 0; i < _imageValues.length; i += 4) _imageValues[i + 3] *= opacity;\n      if ((0, _Util.isNil)(backgroundColor)) {\n        context.putImageData(new ImageData(_imageValues, width), 0, 0);\n        return done(_imageValues);\n      }\n    }\n\n    // Set background color\n    if (!(0, _Util.isNil)(backgroundColor)) {\n      setBackgroundColor();\n      if ((0, _Util.isNil)(opacity)) {\n        context.drawImage(imageBitmap, 0, 0);\n        return done();\n      }\n      internalContext.clearRect(0, 0, width, height);\n      internalContext.putImageData(new ImageData(_imageValues, width), 0, 0);\n      context.drawImage(internalCanvas, 0, 0);\n      return done();\n    }\n  });\n  handleUpdateImage = () => {\n    this.colors = new Promise(resolve => {\n      this._handleUpdateImage(resolve);\n    });\n  };\n  loadExampleImage = () => {\n    this.loadingToast = (0, _Util.toast)(\"Loading example image...\", true);\n    const image = new Image();\n    image.onload = () => {\n      this.handleReadUpload(image);\n    };\n    image.src = \"./example.png\";\n  };\n  getColorsAt = async (startX, startY, width, height) => {\n    const {\n      preview\n    } = this;\n    if (!this.colors) return [];\n    let colors;\n    let resolvedColors = [];\n    while (colors !== this.colors) {\n      colors = this.colors;\n      resolvedColors = await colors;\n    }\n    const targetColors = [];\n    for (let y = startY; y < startY + height; y++) {\n      for (let x = startX; x < startX + width; x++) {\n        const i = (y * preview.width + x) * 4;\n        if (i < 0 || i + 4 > resolvedColors.length) continue;\n        targetColors.push({\n          r: resolvedColors[i + 0],\n          g: resolvedColors[i + 1],\n          b: resolvedColors[i + 2],\n          a: resolvedColors[i + 3]\n        });\n      }\n    }\n    return targetColors;\n  };\n  setBackgroundColor = color => {\n    if (!color) delete this.backgroundColor;else this.backgroundColor = color;\n    this.handleUpdateImage();\n  };\n  setOpacity = opacity => {\n    if (opacity === 1) delete this.opacity;else this.opacity = opacity;\n    this.handleUpdateImage();\n  };\n}\nexports.default = Preview;\n//# sourceMappingURL=Preview.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _Util = require(\"./Util.js\");\nclass Results {\n  constructor(resultFields) {\n    this.resultElementArray = [];\n    this.resultElementHashmap = {};\n    resultFields.forEach(resultField => {\n      const textElement = resultField.querySelector(\"input\");\n      const foregroundElement = resultField.querySelector(\".foreground\");\n      const backgroundElement = resultField.querySelector(\".background\");\n      const copyButton = resultField.querySelector(\".copy\");\n      if (copyButton) {\n        copyButton.addEventListener(\"click\", e => {\n          e.preventDefault();\n          navigator.clipboard.writeText(textElement.value);\n          (0, _Util.toast)(`Copied ${textElement.value}`);\n        });\n      }\n      const proxiedTextElement = new Proxy(textElement, {\n        set: (target, name, value) => {\n          if (name === \"value\") foregroundElement.style.backgroundColor = value;\n\n          // @ts-expect-error continue with default behavior\n          target[name] = value;\n          return true;\n        }\n      });\n      const name = textElement.name.split(\"ResultText\")[0];\n      const info = {\n        textElement: proxiedTextElement,\n        foregroundElement,\n        backgroundElement\n      };\n      this.resultElementHashmap[name] = info;\n      this.resultElementArray.push(info);\n    });\n  }\n  setBackgroundColor = color => {\n    const {\n      resultElementArray\n    } = this;\n    resultElementArray.forEach(info => {\n      info.backgroundElement.style.backgroundColor = color;\n    });\n  };\n  setResult = (type, color, options) => {\n    const {\n      resultElementHashmap\n    } = this;\n    const resultFormat = options.resultFormat;\n    const hideAlphaChannel = options.hideAlphaChannel;\n    let includeAlpha = false;\n    if (hideAlphaChannel === \"always\") includeAlpha = false;else if (hideAlphaChannel === \"never\") includeAlpha = true;else if (color.a !== 255) includeAlpha = true;\n    let value = \"\";\n    if (resultFormat === \"rgb\") value = includeAlpha ? color.toRgba() : color.toRgb();\n    if (resultFormat === \"hex\") value = includeAlpha ? color.toHex8() : color.toHex6();\n    if (resultFormat === \"hsl\") value = includeAlpha ? color.toHsla() : color.toHsl();\n    if (resultFormat === \"svg\") value = color.getClosedNamedColor();\n    if (!value) throw `Invalid resultFormat option: ${resultFormat.toString()}`;\n    resultElementHashmap[type].textElement.value = value;\n  };\n}\nexports.default = Results;\n//# sourceMappingURL=Results.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nclass Selection {\n  isInProgress = false;\n  startPosition = {\n    x: 0,\n    y: 0\n  };\n  endPosition = {\n    x: 0,\n    y: 0\n  };\n  constructor(borderElement, targetElement, callback) {\n    targetElement.addEventListener(\"mousedown\", this.handleSelect, {\n      passive: true\n    });\n    targetElement.addEventListener(\"mouseup\", this.handleSelect, {\n      passive: true\n    });\n    targetElement.addEventListener(\"mousemove\", this.handleSelect, {\n      passive: true\n    });\n    targetElement.addEventListener(\"mouseleave\", this.handleSelect, {\n      passive: true\n    });\n    targetElement.addEventListener(\"touchstart\", this.handleTouch);\n    targetElement.addEventListener(\"touchend\", this.handleTouch);\n    targetElement.addEventListener(\"touchmove\", this.handleTouch);\n    this.outline = borderElement;\n    this.target = targetElement;\n    if (callback) this.onSelectionEnd = callback;\n  }\n  handleTouch = e => {\n    const {\n      targetTouches,\n      changedTouches,\n      type\n    } = e;\n    if (targetTouches.length !== 2) return;else e.preventDefault();\n    const {\n      target,\n      updateInfo,\n      updateOutline,\n      callback\n    } = this;\n    const touches = type === \"touchend\" ? changedTouches : targetTouches;\n    const boundingRect = target.getBoundingClientRect();\n    const x1 = Math.round(touches[0].clientX - boundingRect.left);\n    const y1 = Math.round(touches[0].clientY - boundingRect.top);\n    const x2 = Math.round(touches[1].clientX - boundingRect.left);\n    const y2 = Math.round(touches[1].clientY - boundingRect.top);\n    this.startPosition = {\n      x: x1,\n      y: y1\n    };\n    this.endPosition = {\n      x: x2,\n      y: y2\n    };\n    updateInfo();\n    updateOutline();\n    if (callback) callback();\n  };\n  handleSelect = e => {\n    const {\n      type,\n      button,\n      clientX,\n      clientY\n    } = e;\n    const {\n      target,\n      isInProgress,\n      updateInfo,\n      updateOutline,\n      callback\n    } = this;\n    if (button !== null && button !== 0) return;\n    const boundingRect = target.getBoundingClientRect();\n    const x = Math.round(clientX - boundingRect.left);\n    const y = Math.round(clientY - boundingRect.top);\n    if (type === \"mousedown\") {\n      this.startPosition = {\n        x,\n        y\n      };\n      this.isInProgress = true;\n      return;\n    }\n    if (!isInProgress) return;\n    if (type === \"mousemove\" || type === \"mouseup\" || type === \"mouseleave\") {\n      this.endPosition = {\n        x,\n        y\n      };\n      updateInfo();\n      updateOutline();\n      if (callback) callback();\n    }\n    if (type === \"mouseup\" || type === \"mouseleave\") this.isInProgress = false;\n  };\n  set onSelectionEnd(callback) {\n    this.callback = callback;\n  }\n  updateInfo = () => {\n    const {\n      startPosition,\n      endPosition,\n      target\n    } = this;\n    const top = Math.max(Math.min(startPosition.y, endPosition.y), 0);\n    const left = Math.max(Math.min(startPosition.x, endPosition.x), 0);\n    const bottom = Math.min(Math.max(startPosition.y, endPosition.y), target.height);\n    const right = Math.min(Math.max(startPosition.x, endPosition.x), target.width);\n    const width = Math.max(right - left, 1);\n    const height = Math.max(bottom - top, 1);\n    this.info = {\n      top,\n      left,\n      bottom,\n      right,\n      width,\n      height\n    };\n  };\n  updateOutline = () => {\n    const {\n      outline,\n      info\n    } = this;\n    if (!info) return;\n    const {\n      top,\n      left,\n      width,\n      height\n    } = info;\n    const cssText = `top:${top}px; left:${left}px; width:${width}px; height:${height}px;`;\n    outline.style.cssText = cssText;\n  };\n  clear = () => {\n    const {\n      outline\n    } = this;\n    outline.style.cssText = \"\";\n    delete this.info;\n  };\n}\nexports.default = Selection;\n//# sourceMappingURL=Selection.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toast = exports.round = exports.isNil = exports.debounce = exports.clamp = void 0;\nvar _this = void 0;\nconst debounce = function (func) {\n  let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n  let timer;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    clearTimeout(timer);\n    timer = setTimeout(() => func.apply(_this, args), timeout);\n  };\n};\nexports.debounce = debounce;\nconst round = function (value) {\n  let decimalPlaces = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return +(Math.round(+(value + `e+${decimalPlaces}`)) + `e-${decimalPlaces}`);\n};\nexports.round = round;\nconst clamp = (value, min, max) => Math.max(Math.min(value, max), min);\nexports.clamp = clamp;\nconst toast = function (message) {\n  let persist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const toast = document.createElement(\"div\");\n  toast.textContent = message;\n  toast.className = `toast ${persist ? \"\" : \"fade-out\"}`;\n  toast.setAttribute(\"role\", \"status\");\n  const toastContainer = document.querySelector(\".toast-container\");\n  if (toastContainer) {\n    toastContainer.appendChild(toast);\n    if (persist) {\n      return () => {\n        requestAnimationFrame(() => toastContainer.removeChild(toast));\n      };\n    } else {\n      setTimeout(() => {\n        toastContainer.removeChild(toast);\n      }, 1500);\n    }\n  }\n};\nexports.toast = toast;\nconst isNil = value => value == null;\nexports.isNil = isNil;\n//# sourceMappingURL=Util.js.map\n","\"use strict\";\n\nvar _Color = _interopRequireDefault(require(\"./classes/Color.js\"));\nvar _Options = _interopRequireDefault(require(\"./classes/Options.js\"));\nvar _Preview = _interopRequireDefault(require(\"./classes/Preview.js\"));\nvar _Selection = _interopRequireDefault(require(\"./classes/Selection.js\"));\nvar _Results = _interopRequireDefault(require(\"./classes/Results.js\"));\nvar _Util = require(\"./classes/Util.js\");\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nfunction init() {\n  const $ = selector => Array.from(document.querySelectorAll(selector));\n  const optionsForm = $(\".options\")[0];\n  const resultsForm = $(\".results\")[0];\n  optionsForm.reset();\n  resultsForm.reset();\n  optionsForm.addEventListener(\"submit\", e => {\n    e.preventDefault();\n    calculate();\n  });\n  const optionFields = $(\".options :is(input, select)\");\n  const resultFields = $(\".results .field\");\n  const previewElement = $(\".preview\")[0];\n  const uploaderElement = $(\"input[name=imageUpload]\")[0];\n  const selectorElement = $(\".selector\")[0];\n  const options = new _Options.default(optionFields);\n  const preview = new _Preview.default(previewElement, uploaderElement);\n  const results = new _Results.default(resultFields);\n  const selection = new _Selection.default(selectorElement, previewElement);\n  const calculate = (0, _Util.debounce)(async () => {\n    if (!selection.info) return;\n    const {\n      top,\n      left,\n      width,\n      height\n    } = selection.info;\n    const selectedColors = await preview.getColorsAt(left, top, width, height);\n    const [meanColor, medianColor] = _Color.default.getMeanMedian(selectedColors, options);\n    const [lightestColor, darkestColor] = _Color.default.getLightestDarkest(selectedColors);\n    results.setResult(\"mean\", meanColor, options);\n    results.setResult(\"median\", medianColor, options);\n    results.setResult(\"lightest\", lightestColor, options);\n    results.setResult(\"darkest\", darkestColor, options);\n  }, 100);\n  uploaderElement.addEventListener(\"change\", selection.clear);\n  const exampleImageButton = $(\"#example-image-button\")[0];\n  const resetButton = $(\"button[type=reset]\")[0];\n  const saveButton = $(\"button[name=save\")[0];\n  const downloadButton = $(\"button[name=download\")[0];\n  exampleImageButton.addEventListener(\"click\", e => {\n    e.preventDefault();\n    selection.clear();\n    uploaderElement.value = \"\";\n    preview.loadExampleImage();\n  });\n  resetButton.addEventListener(\"click\", e => {\n    e.preventDefault();\n    optionsForm.reset();\n    options.triggerAllBeforeChangeCallbacks();\n    calculate();\n    (0, _Util.toast)(\"Options reset!\");\n  });\n  saveButton.addEventListener(\"click\", e => {\n    e.preventDefault();\n    options.save();\n    (0, _Util.toast)(\"Options saved!\");\n  });\n  downloadButton.addEventListener(\"click\", e => {\n    e.preventDefault();\n    const hideToast = (0, _Util.toast)(\"Preparing download...\", true);\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        const a = document.createElement(\"a\");\n        a.href = previewElement.toDataURL(\"image/png\", 1.0);\n        a.download = \"example.png\";\n        if (uploaderElement.files && uploaderElement.files.length) {\n          a.download = uploaderElement.files[0].name.split(\".\").slice(0, -1).join(\".\") + \".png\";\n        }\n        if (hideToast) hideToast();\n        a.click();\n      });\n    });\n  });\n  options.onBeforeChange(\"opacityPercentage\", () => {\n    const opacityPercent = options.opacityPercentage;\n    preview.setOpacity(opacityPercent / 100);\n  });\n  const handleBackgroundSettingsChanged = () => {\n    const transparencyType = options.transparencyType;\n    let backgroundColor = \"\";\n    if (transparencyType === \"premultiplied\") {\n      backgroundColor = options.backgroundColor.toLowerCase().trim();\n    }\n    preview.setBackgroundColor(backgroundColor);\n    results.setBackgroundColor(backgroundColor);\n    calculate();\n  };\n  options.onBeforeChange(\"backgroundColor\", handleBackgroundSettingsChanged);\n  options.onBeforeChange(\"transparencyType\", handleBackgroundSettingsChanged);\n  options.triggerAllBeforeChangeCallbacks();\n  selection.onSelectionEnd = calculate;\n  options.onChange = calculate;\n}\nwindow.onload = () => requestAnimationFrame(init);\n//# sourceMappingURL=index.js.map\n"]}